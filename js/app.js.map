{"version":3,"file":"app.js","sources":["../node_modules/composi/lib/h.js","../node_modules/composi/lib/utils/getKey.js","../node_modules/composi/lib/utils/mixin.js","../node_modules/composi/lib/utils/setProps.js","../node_modules/composi/lib/utils/removeElement.js","../node_modules/composi/lib/utils/patchElement.js","../node_modules/composi/lib/utils/createElement.js","../node_modules/composi/lib/utils/updateElement.js","../node_modules/composi/lib/patch.js","../node_modules/composi/lib/utils/recycleElement.js","../node_modules/composi/lib/mount.js","../node_modules/composi/lib/component.js","../dev/components/title.js","../dev/components/list.js","../dev/app.js"],"sourcesContent":["/**\n * @description Hyperscript function. Enables definition of HTML/SVG using functions.\n * @param {string} type - The name of the HTML or SVG tag to create.\n * @param {object} props - And object of property/value pairs.\n * @param {string|number|boolean|any[]} args - Any child elements.\n * @returns {object} A virtual node describing an element.\n * @example Virtual node with string as content:\n * const title = h('h1', {class: 'main-title'}, 'This is the Titel!')\n * @example Virtual node with children:\n * const list = h(\n *   'ul',\n *   {class: 'list'},\n *   [\n *     h('li', {}, 'One'),\n *     h('li', {}, 'Two'),\n *     h('li', {}, 'Three')\n *   ]\n * )\n */\nexport function h(type, props, ...children) {\n  const nodes = []\n  const childNodes = []\n  let length = children.length\n\n  while (length-- > 0) nodes.push(children[length])\n\n  while (nodes.length) {\n    const node = nodes.pop()\n    if (node && node.pop) {\n      for (length = node.length; length--; ) {\n        nodes.push(node[length])\n      }\n    } else if (node != null && node !== true && node !== false) {\n      childNodes.push(node)\n    }\n  }\n\n  if (typeof type === \"function\") {\n    return type(props || {}, children)\n  } else {\n    return {\n      type,\n      props: props || {},\n      children: childNodes\n    }\n  }\n}\n","/**\n * @description Function to get a node's key.\n * @param {object} node A virtual node.\n * @returns {string|number} key.\n */\nexport const getKey = node => node && node.props && node.props.key\n","/**\n * @description A function to merge two objects together. The properties of the second object will overwrite any matching properties in the first object.\n * @param {object} obj1 The first object to merge.\n * @param {object} obj2 The second object to merge.\n * @returns {object} Returns a new object of the second object merged with the first.\n */\nexport function mixin(obj1, obj2) {\n  const result = {}\n  for (let i in obj1) {\n    result[i] = obj1[i]\n  }\n  for (let i in obj2) {\n    result[i] = obj2[i]\n  }\n  return result\n}\n","import {mixin} from './mixin'\n\n/**\n * @description Function to set properties and attributes on element.\n * @param {HTMLElement} element The element to set props on.\n * @param {string} prop The property/attribute.\n * @param {string|number|boolean} value The value of the prop.\n * @param {string|number|boolean} oldValue The original value of the prop.\n * @param {boolean} isSVG Whether this is SVG or not\n * @returns {undefined} void.\n */\nexport function setProps(\n    element, \n    prop, \n    value, \n    oldValue, \n    isSVG\n  ) {\n  if (prop === \"key\") {\n  } else if (prop === \"style\" && typeof value !== 'string') {\n    for (let i in mixin(oldValue, value)) {\n      element[prop][i] = value == null || value[i] == null ? \"\" : value[i]\n    }\n  } else {\n    // Allow setting innerHTML:\n    if (prop === 'dangerouslySetInnerHTML') {\n      element.innerHTML = value\n    }\n      \n    if (\n      typeof value === \"function\" ||\n      (prop in element && prop !== \"list\" && !isSVG)\n    ) {\n      element[prop] = value == null ? \"\" : value\n    \n    } else if (value != null && value !== false) {\n      // Support SVG 'xlink:href' property:\n      if (prop === 'xlink-href') {\n        element.setAttributeNS('http://www.w3.org/1999/xlink', 'href', value)\n        element.setAttribute('href', value)\n      } else {\n        element.setAttribute(prop, value)\n      }\n    }\n\n    if (value == null || value === false) {\n      element.removeAttribute(prop)\n    }\n  }\n}\n","/**\n * @description Function to remove element from DOM.\n * @param {HTMLElement} parent The containing element in which the component resides.\n * @param {HTMLElement} element The parent of the element to remove.\n * @param {HTMLElement} node The element to remove.\n * @returns {undefined} void.\n */\nexport const removeElement = (parent, element) => parent.removeChild(element)\n","import {getKey} from './getKey'\nimport {createElement} from './createElement'\nimport {updateElement} from './updateElement'\nimport {removeElement} from './removeElement'\n\n/**\n * @description A function to diff and patch a DOM node with a virtual node.\n * @param {HTMLElement} parent The parent node of the elment being patched.\n * @param {HTMLElement} element The element being patched.\n * @param {object} oldNode A virtual dom node from the previous patch.\n * @param {object} node The current virtual dom node.\n * @param {boolean} recycle A virtual node to check whether to reuse an element or not.\n * @param {boolean} isSVG Whether we are dealing with an SVG element or not.\n * @returns element The patched element.\n */\nexport function patchElement(\n    parent,\n    element,\n    oldNode,\n    node,\n    recycle,\n    isSVG\n  ) {\n  if (node === oldNode) {\n  } else if (oldNode == null || oldNode.type !== node.type) {\n    const newElement = createElement(node, isSVG)\n    if (parent) {\n      parent.insertBefore(newElement, element)\n      if (oldNode != null) {\n        removeElement(parent, element, oldNode)\n      }\n    }\n    element = newElement\n  } else if (oldNode.type == null) {\n    element.nodeValue = node\n  } else {\n    updateElement(\n      element,\n      oldNode.props,\n      node.props,\n      (isSVG = isSVG || node.type === \"svg\")\n    )\n\n    const oldKeyed = {}\n    const newKeyed = {}\n    const oldElements = []\n    const oldChildren = oldNode.children\n    const children = node.children\n\n    for (let i = 0; i < oldChildren.length; i++) {\n      oldElements[i] = element.childNodes[i]\n\n      const oldKey = getKey(oldChildren[i])\n      if (oldKey != null) {\n        oldKeyed[oldKey] = [oldElements[i], oldChildren[i]]\n      }\n    }\n\n    let i = 0\n    let k = 0\n\n    while (k < children.length) {\n      let oldKey = getKey(oldChildren[i])\n      let newKey = getKey((children[k] = children[k]))\n\n      if (newKeyed[oldKey]) {\n        i++\n        continue\n      }\n\n      if (newKey == null || recycle) {\n        if (oldKey == null) {\n          patchElement(\n            element,\n            oldElements[i],\n            oldChildren[i],\n            children[k],\n            recycle,\n            isSVG\n          )\n          k++\n        }\n        i++\n      } else {\n        const keyedNode = oldKeyed[newKey] || []\n\n        if (oldKey === newKey) {\n          patchElement(\n            element,\n            keyedNode[0],\n            keyedNode[1],\n            children[k],\n            recycle,\n            isSVG\n          )\n          i++\n        } else if (keyedNode[0]) {\n          patchElement(\n            element,\n            element.insertBefore(keyedNode[0], oldElements[i]),\n            keyedNode[1],\n            children[k],\n            recycle,\n            isSVG\n          )\n        } else {\n          patchElement(\n            element,\n            oldElements[i],\n            null,\n            children[k],\n            recycle,\n            isSVG\n          )\n        }\n\n        newKeyed[newKey] = children[k]\n        k++\n      }\n    }\n\n    while (i < oldChildren.length) {\n      if (getKey(oldChildren[i]) == null) {\n        removeElement(element, oldElements[i], oldChildren[i])\n      }\n      i++\n    }\n\n    for (let i in oldKeyed) {\n      if (!newKeyed[i]) {\n        removeElement(element, oldKeyed[i][0], oldKeyed[i][1])\n      }\n    }\n  }\n  return element\n}\n","import {setProps} from './setProps'\n\n/**\n * @description Function to convert hyperscript/JSX into DOM nodes.\n * @param {Function} node A node to create. This may be a hyperscript function or a JSX tag which gets converted to hyperscript during transpilation.\n * @param {boolean} isSVG Whether the node is SVG or not.\n * @returns {HTMLElement}.\n */\nexport function createElement(node, isSVG) {\n  const element =\n    typeof node === \"string\" || typeof node === \"number\"\n      ? document.createTextNode(node)\n      : (isSVG = isSVG || node.type === \"svg\")\n        ? document.createElementNS(\"http://www.w3.org/2000/svg\", node.type)\n        : document.createElement(node.type)\n\n  const props = node.props\n  if (props) {\n\n    for (let i = 0; i < node.children.length; i++) {\n      element.appendChild(createElement(node.children[i], isSVG))\n    }\n\n    for (let prop in props) {\n      setProps(element, prop, props[prop], null, isSVG)\n    }\n  }\n\n  return element\n}\n","import {mixin} from './mixin'\nimport {setProps} from './setProps'\n\n/**\n * @description A function to update an element based on a virtual dom node.\n * @param {HTMLElement} element The element to update\n * @param {object} oldProps The original props used to create the element.\n * @param {object} props New props generated by the virtual dom.\n * @param {boolean} isSVG Whether we are dealing with SVG or not.\n * @returns {undefined} void.\n */\nexport function updateElement(\n    element,\n    oldProps,\n    props,\n    isSVG\n  ) {\n  for (let prop in mixin(oldProps, props)) {\n    if (\n      props[prop] !==\n      (prop === \"value\" || prop === \"checked\"\n        ? element[prop]\n        : oldProps[prop])\n    ) {\n      setProps(\n        element,\n        prop,\n        props[prop],\n        oldProps[prop],\n        isSVG\n      )\n    }\n  }\n}\n","import {patchElement} from './utils/patchElement'\nimport {recycleElement} from './utils/recycleElement'\n\n/**\n * @description A function to patch a virtual node agains a DOM element, updating it in the most efficient manner possible.\n * @param {object} node A virtual node. This may be a JSX tag or a hyperscript function.\n * @param {HTMLElement} element The element to patch.\n * @returns {HTMLElement} The updated element.\n */\nexport function patch(node, element) {\n  element = patchElement(\n    element && element.parentNode,\n    element,\n    element && element.node == null\n      ? recycleElement(element)\n      : element && element.node,\n    node,\n    element && element.node == null\n  )\n  element.node = node\n\n  return element\n}\n","/**\n * @description A function to recycle/reuse DOM elements when updating existing elements.\n * @param {HTMLElement} element \n * @returns {object} A virtual node of a recyclable element.\n */\nexport function recycleElement(element) {\n  if (element && element.nodeName) {  \n    return {\n      type: element.nodeName.toLowerCase(),\n      props: {},\n      children: Array.prototype.map.call(\n        element.children, \n        element => element.nodeType === 3\n          ? element.nodeValue\n          : recycleElement(element)\n      )\n    }\n  }\n}\n","import {patch} from './patch'\nimport {h} from './h'\n\n/** \n * Function to throw error message when attempting to insert Fragement tag directly into DOM.\n */\nfunction FragmentError() {\n  this.message = 'Cannot insert Fragment directly into DOM.'\n  this.toString = function() {\n    return this.message\n  }\n}\n\n/**\n * @description A function to create and inject a virtual node into the document. The node will be appended to the container. The first argument can be either a JSX tag or an h function. After mounting, use the render function and the element returned by mount to udate the DOM.\n * @example Insert Title tag into section: \n * const title = mount(<Title message='Hello World!'/>, 'section').\n * // Update the node with new prop value and reference to DOM from mount:\n * render(<Title message=\"New stuff\"/>, title)\n * @param {function} tag A JSX tag or hyperscript function to render.\n * @param {HTMLElement|boolean} [container] The element into which the tag will be rendered.\n * @returns {HTMLElement} The base element of the rendered tag.\n */\nexport const mount = (tag, container) => {\n  container = typeof container === 'string' && document.querySelector(container)\n  if (!container) container = document.body\n  if (Array.isArray(tag)) throw new FragmentError()\n  const element = patch(tag)\n  return container.appendChild(element)\n}\n","import {h} from './h'\nimport {patch} from './patch'\nimport {mixin} from './utils/mixin'\n\n/**\n * @description A cross-browser normalization/polyfill for requestAnimationFrame.\n */\nconst rAF = window.requestAnimationFrame\n  || window.webkitRequestAnimationFrame\n  || window.mozRequestAnimationFrame\n  || window.msRequestAnimationFrame\n  || function(cb) { return setTimeout(cb, 16) }\n\n/**\n * @description This is a Time Object used as a key to create a pseudo-private property in the Component class for holding state.\n * @type {Object} dataStore A Date object to use as pseudo-private key to store the component's state.\n */\nconst dataStore = new Date().getTime()\n\n/**\n * @description Component can be instantiated with the new keyword, or extended to create a custom version of the class.\n * @class Class to create a component.\n * @example New instance of Component class:\n * const title = new Component({\n *   container: 'header',\n *   state: 'World',\n *   render: message => <h1>Hello, {message}!</h1>\n * })\n * @example Extending Component class:\n * class UserList extends Component {\n *   constructor(props) {\n *     super(props)\n *     this.state = users\n *     this.container = 'section'\n *   }\n *   render(users) {\n *     return (\n *      <ul class='user-list'>\n *        {\n *          users.map(user => <li>{user.name}</li>)\n *        }\n *      </ul>\n *     )\n *   }\n * }\n */\nexport class Component {\n  /**\n   * @description Constructor for Component class.\n   * @typedef {object} props An object of property/values to configure the class instance.\n   * @property {string|element} props.container The container element in which to render the component.\n   * @property {state} [props.state] The state object of the component. This can be of type boolean, string, number, object or array.\n   * @property {function} props.render A function that returns nodes to render to the DOM.\n   * @constructs Component\n   */\n  constructor(props) {\n    if (!props) props = {}\n    /** @property {string} */\n    this.selector = props.container || 'body'\n    \n    if (props.render) {\n      /** @property {Function} */\n      this.render = props.render\n    }\n    \n    if (props.state) {\n      /** @property {boolean|number|string|object|array} */\n      this.state = props.state\n    }\n\n    /** @property {null, Object} */\n    this.oldNode = null\n    if (this.selector) {\n      /** @property {HTMLElement} */\n      this.container = document.querySelector(this.selector)\n    }\n    /** @property {boolean} */\n    this.componentShouldUpdate = true\n    \n    /** @property {boolean} */\n    this.mounted = false\n\n    /** \n     * @property {HTMLElement|undefined} \n     * @default {undefined}\n    */\n    this.element\n    \n    /**\n     * @description Handle lifecycle hooks.\n     */\n    if (props.componentWillMount) this.componentWillMount = props.componentWillMount\n  \n    if (props.componentDidMount) this.componentDidMount = props.componentDidMount\n\n    if (props.componentWillUpdate) this.componentWillUpdate = props.componentWillUpdate\n    \n    if (props.componentDidUpdate) this.componentDidUpdate = props.componentDidUpdate\n    \n    if (props.componentWillUnmount) this.componentWillUnmount = props.componentWillUnmount\n  }\n\n  /**\n   * @description This is getter to access the component's state using the pseudo-private key dataStore.\n   * @returns {boolean|number|string|object|any[]} The component's state\n   */\n  get state() {\n    return this[dataStore]\n  }\n\n  /**\n   * @description This is setter to define the component's state. It uses the dataStore object as a pseudo-private key.\n   * method\n   * @param {string|number|boolean|object|array} data Data to set as component state. \n   * @returns {undefined} void\n   */\n  set state(data) {\n    this[dataStore] = data\n    rAF(() => this.update())\n  }\n  \n  /**\n   * @description Method to set a component's state. This accepts simple types or Objects. If updating an array, you can pass in the data and the position (number) in the array to update. Optionally you can pass a callback. This receives the state as its argument. You need to return the state changes in order to update the component's state.\n   * @example\n   * this.setState(true)\n   * this.setState(0)\n   * this.setState({name: 'Joe'})\n   * this.setState([1,2,3])\n   * this.setState(prevState => prevState + 1)\n   * @property Component#setState\n   * @param {string|number|boolean|object|array|Function} data - The data to set.\n   * @param {number} [position] The index of an array whose data you want to set.\n   * @returns {undefined} void\n   */\n  setState(data, position) {\n    if (typeof data === 'function') {\n      const state = data.call(this, this.state)\n      if (typeof state !== 'function' && !!state) this.setState(state)\n    } else if (Array.isArray(this.state)) {\n      const state = this.state\n      if (position || position === 0) {\n        if (typeof state[position] === 'object') {\n          this.state = mixin(state[position], data)\n        } else {\n          state[position] = data\n          this.state = state\n        }\n      } else {\n        this.state = state\n      }\n    } else if (typeof this.state === 'object') {\n      const state = this.state\n      this.state = mixin(state, data)\n    } else {\n      this.state = data\n    }\n  }\n\n  /**\n   * @description Function to render component after data changes.\n   * If data is passed as argument, it will be used.\n   * Otherwise state will be used.\n   * @property Component#update\n   * @param {boolean|number|string|object|array} [data]\n   * @returns {undefined} void\n   */\n  update(data) {\n    if (!this.render) return\n\n    // If componentShouldUpdate is set to false, render one time only.\n    // All other updates will be ignored.\n    if (!this.componentShouldUpdate && this.mounted) return\n\n    // If data is 0 or non-boolean, use,\n    // else use component state.\n    let __data  = this.state\n    if (data !== true && data) __data = data\n\n    if (this.container && typeof this.container === 'string') {\n      this.selector = this.container\n      this.container = document.querySelector(this.container)\n    }\n\n    // Check if vnode already exists.\n    // Used for deciding whether to fire lifecycle events.\n    const __oldNode = this.oldNode\n    const __render = this.render\n    function testIfVNodesDiffer(oldNode, data) {\n      if (this && JSON.stringify(oldNode) === JSON.stringify(__render(data))) {\n        return false\n      } else {\n        return true\n      }\n    }\n    // Create virtual dom and check if component id already exists in document.\n    const vdom = this.render(__data)\n    let elem\n    if (\n      vdom \n      && vdom.props \n      && vdom.props.id \n      && this.container\n    ) {\n      elem = this.container && this.container.querySelector(`#${vdom.props.id}`)\n    }\n\n    // If component element id already exists in DOM, \n    // remove it before rendering the component.\n    if (elem && !this.mounted) {\n      elem.parentNode.removeChild(elem)\n    }\n\n    // Patch DOM with component update.\n    this.oldNode = this.render(__data)\n    this.element = patch(\n      this.oldNode,\n      this.element\n    )\n    if (!this.mounted) {\n      this.componentWillMount && this.componentWillMount(this)\n      this.container.appendChild(this.element)\n      this.mounted = true\n      this.componentDidMount && this.componentDidMount(this)\n      return\n    }\n    \n    if (this.mounted && this.oldNode && testIfVNodesDiffer(__oldNode, __data)) {\n      this.componentWillUpdate && this.componentWillUpdate(this)\n    }\n    this.componentDidUpdate && testIfVNodesDiffer(__oldNode, __data) && this.componentDidUpdate(this)\n  }\n  \n  /**\n   * @description Method to destroy component.\n   * First unbind events.\n   * Then remove component element from DOM.\n   * Also null out component properties.\n   * @property Component#unmount\n   * @returns {undefined} void\n   */\n  unmount() {\n    const self = this\n    const eventWhitelist = [\n      'change',\n      'click', \n      'dblclick', \n      'input', \n      'keydown',\n      'keypress',  \n      'keyup', \n      'mousedown',\n      'mouseleave',\n      'mouseout', \n      'mouseover',\n      'mouseup',  \n      'select',  \n      'submit',\n      'touchcancel',\n      'touchend',\n      'touchmove',\n      'touchstart'\n    ]\n    if (!this.element) return\n    this.componentWillUnmount && this.componentWillUnmount(this)\n    eventWhitelist.map(event => {\n      this.element.removeEventListener(event, this)\n    })\n    this.container.removeChild(this.element)\n    this.container = undefined\n    for (let key in this) {\n      delete this[key]\n    }\n    delete this.state\n    this.update = undefined\n    this.unmount = undefined\n  }\n}\n","import {h, Component} from 'composi'\n\nexport default new Component({\n  container: 'header',\n  render: (message) => {\n    return (\n      <nav>\n        <h1>Composi Image Browser</h1>\n      </nav>\n    )\n  }\n})\n","import {h, mount, render, Component} from 'composi'\n\nexport default class List extends Component {\n  render(data) {\n    return (\n      <div id=\"app\">\n        <ul class='list'>\n          {\n            data.map(cat => (\n              <li key={cat.id}>\n                <h2>{cat.name}</h2>\n                <div onclick={(e) => this.showImage(e)} \n                data-url={cat.url} class=\"image-container\" style={{backgroundImage: `url(${cat.url})` }} />\n                <div class=\"description\">{cat.description}</div>\n              </li> \n            ))\n          }\n        </ul>\n        <p class=\"add-more\">\n          <button onclick={() => this.add10More()}>Show 10 More</button>\n        </p>\n      </div>\n    )\n  }\n  add10More() {\n    const data = buildData(10)\n    const state = this.state\n    const updatedState = state.concat(data)\n    console.log(updatedState)\n    this.state = updatedState\n  }\n  showImage(e) {\n    this.popup.style.display = 'flex'\n    this.popupImage.style.backgroundImage = `url(${e.target.dataset.url})`\n    setTimeout(() => {\n      this.popupImage.classList.add('opened')\n    }, 200)\n  }\n  closePopup(e) {\n   this.popupImage.classList.remove('opened')\n   setTimeout(() => {\n    this.popup.style.display = 'none';\n   }, 500)\n  }\n  handleEvent() {\n    this.closePopup()\n  }\n  componentDidMount() {\n    function Mask() {\n      return (\n      <div id=\"mask\">\n        <div id=\"popup-image\"></div>\n      </div>\n      )\n    }\n    mount(<Mask />, 'body')\n    this.popup = document.querySelector('#mask')\n    this.popup.addEventListener('click', this)\n    this.popupImage = document.querySelector('#popup-image')\n  }\n}\n\nexport function buildData(count = 10) {\n\n  function random(max) {\n    return Math.round(Math.random()*1000)%max;\n  }\n  function uuid() {\n    return Math.floor(Math.random() *10000000 + Math.random() *10000)\n  }\n  const names = [\n    'Misty', 'Scrappy', 'Sandy', 'Mr Tabor', 'Ransel', 'Tabby', 'Meow Meow', 'Kit Cat', 'Mouser', 'Hyacinth', 'Sleepy', 'Rowdy', 'Pouncer', 'Petunia', 'Racer', 'Tiger', 'Toby', 'Midnight', 'Princess', 'Shadow', 'Jasper', 'Sneakers', 'Charley', 'Max', 'Rocky', 'CoCo', 'Purrfect', 'Oscar', 'Poof', 'Pepper', 'Archie', 'Mittens', 'Tux', 'Patches', 'Augusta', 'Calico', 'Lucky', 'Garfield', 'Simon', 'Babsy', 'Felix', 'Sassy', 'Silvester', 'Precious', 'Aster', 'Snickers', 'Wiskers', 'Jester', 'Buttler', 'Socks', 'Fluffy', 'Chester', 'Rusty', 'Dusty', 'Felix', 'Catkin', 'Cuddles', 'Buster', 'Boots', 'Flox', 'Magic', 'Willow', 'Butters', 'Juniper', 'Lacy', 'Higgins', 'Cosmo', 'Dexter', 'Cuddles', 'Bobtail', 'Gypsy', 'Fuzzy', 'Dufus', 'Buster', 'Leela', 'Manx', 'Jax', 'Grumpy', 'Ferris', 'Chance', 'Snoopy', 'Pixie', 'Bushy', 'Penny', 'Snowball', 'Muffin', 'Buffy', 'Hobbit', 'Chase', 'Emmett', 'Ribbon', 'Scamper', 'Wiggles', 'Flash', 'Doby', 'Posey', 'Merlin', 'Sparky', 'Lucy', 'Sleepy', 'Wally', 'Furball', 'Marmalade', 'Bert', 'Piper', 'Pookie', 'Puff', 'Cyrus', 'Hyde'\n  ]\n  const adjectives = [\n    'Big', 'Small', 'Tiny',  'Cute', 'Skinny', 'Fat', 'Chubby', 'Scrawny', 'Scrappy', 'Mangy', 'Quiet', 'Angry', 'Excited', 'Jumpy', 'Peaceful', 'Anxious', 'Annoyed', 'Sleepy', 'Tired', 'Hungry', 'Worried', 'Young', 'Old', 'Sick', 'Clean', 'Dirty', 'Shabby', 'Dusty', 'Smelly', 'Dingy', 'Matted', 'Anxious', 'Calm', 'Scared', 'Frightened',  'Brave', 'Courageous', 'Timid', 'Lonely', 'Snugly', 'Aloof', 'Concerned', 'Smart'\n  ]\n  const colors = [\n    'white', 'black', 'spotted', 'tabby', 'brown', 'striped', 'beige', 'gray', 'calico', 'tan', 'orange', 'yellow', 'tawny', 'gold', 'bronze', 'reddish', 'copper', 'silver', 'platinum', 'rusty', 'crimson', 'amber', 'goldenrod', 'apricot', 'brass', 'brandy', 'buff', 'sienna', 'sandy', 'coffee', 'chocolate', 'taupe', 'chestnut', 'hickory', 'marigold', 'moss', 'mustard', 'ochre', 'peach', 'pumpkin', 'rum', 'russet', 'tangerine', 'sunset'\n  ]\n  const data = []\n  for (let i = 0; i < count; i++) {\n    data.push({\n      id: uuid(),\n      name: `${names[random(names.length)]}`,\n      description: `${adjectives[random(adjectives.length)]} ${colors[random(colors.length)]} cat.`,\n      url: `https://loremflickr.com/320/240/cat?lock=${uuid()}`\n    })\n  }\n  return data\n}","import {h, Component} from 'composi'\nimport title from './components/title'\nimport List from './components/list'\nimport {buildData} from './components/list'\n\ntitle.update()\n\nconst data = buildData(10)\n\nconst list = new List({\n  container: 'section',\n  state: data\n})\n"],"names":["h","type","props","nodes","childNodes","children","length","push","node","pop","getKey","key","mixin","obj1","obj2","result","i","setProps","element","prop","value","oldValue","isSVG","innerHTML","setAttributeNS","setAttribute","removeAttribute","removeElement","parent","removeChild","patchElement","oldNode","recycle","newElement","createElement","document","createTextNode","createElementNS","appendChild","insertBefore","nodeValue","oldProps","oldKeyed","newKeyed","oldElements","oldChildren","oldKey","k","newKey","keyedNode","patch","parentNode","recycleElement","nodeName","toLowerCase","Array","prototype","map","call","nodeType","rAF","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cb","setTimeout","dataStore","Date","getTime","Component","selector","container","render","state","this","querySelector","componentShouldUpdate","mounted","componentWillMount","componentDidMount","componentWillUpdate","componentDidUpdate","componentWillUnmount","data","position","setState","isArray","babelHelpers.typeof","__data","__oldNode","__render","vdom","elem","id","testIfVNodesDiffer","JSON","stringify","removeEventListener","event","undefined","update","unmount","_this2","message","List","class","cat","name","onclick","e","showImage","url","style","backgroundImage","description","add10More","buildData","updatedState","concat","log","popup","display","popupImage","target","dataset","classList","add","remove","closePopup","tag","body","toString","addEventListener","count","random","max","Math","round","uuid","floor","names","adjectives","colors","title"],"mappings":"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"}